{"version":3,"sources":["../../server/api/posts.js"],"names":[],"mappings":"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","file":"posts.js","sourcesContent":["import {r, type, Errors} from'./../utils/thinky.js'\n\nvar Bin = require('./../models/bins')\nvar Post = require('./../models/posts')\nvar User = require('./../models/users')\n\n// createPost\n// POST /api/posts\n// query params {auth_token}\n// body {binId, url, title, mediaType}\n// => {post}\nexport function createPost(req, res) {\n  //security assumption: bin exists and user is in that bin\n  const binId = req.body.binId\n  const postBody = req.body\n  postBody.authorId = req.token.id\n  postBody.reactions = []\n\n  const post = new Post(postBody)\n  post.save().then(function(result){\n    res.json(result)\n  })\n}\n\n// deletePost\n// DELETE /api/posts/:id\n// query params {auth_token}\n// => {ok:true}\nexport function deletePost(req, res) {\n  // check if currentUser is the author of post \n  var currentUserId = req.token.id\n  var postId = req.params.postId\n\n  Post.get(postId).run().then(function(post){\n    if (post.authorId == currentUserId) {\n      post.delete().then(function(result){\n        return res.json({ok: true})\n      })\n    } else {\n      return res.json({\n        ok: false, \n        message: 'you are not the author of this post'\n      })\n    }\n  })\n}\n\n// fetchPosts\n// GET /api/posts\n// query params {binId, /lastViewed, offset, limit/, token}\n// => bin passed: [{post}]\n\nexport function fetchPosts(req, res) {\n  const binId = req.query.binId\n  const lastViewed = +req.query.lastViewed || Date.now()\n  const offset = +req.query.offset || 0\n  const limit = +req.query.limit || 3\n\n  Post.between([binId, r.minval], [binId, r.maxval], {index: \"binId_createdAt\"})\n    .orderBy({index: r.desc('binId_createdAt')})\n    .getJoin({reactions: true})\n    .filter(function (post) {\n      return post(\"createdAt\").lt(lastViewed);\n    })\n    .skip(offset)\n    .limit(limit)\n    .run().then(function(posts) {\n\n    // Go through every post object and flatten the reactions array\n\n    posts = posts.map(\n      function(post) {\n\n        const reactions = {}\n        for (const reaction of post.reactions) {\n          // iterate through all reactions within a specific post\n          if(reactions.hasOwnProperty(reaction.emojiId)){\n            reactions[reaction.emojiId]++ \n          } else {\n            reactions[reaction.emojiId] = 1\n          }\n        }\n        post.reactions = reactions\n        return post\n      }\n    )\n    res.json(posts)\n  })\n\n  // Bin.get(binId).getJoin().run().then(function(bin){\n  //   res.json(bin.posts)\n  // }).catch(Errors.DocumentNotFound, function(err) {\n  //   res.json({err: 'Bin does not exist.'})\n  // })\n}\n\n"]}